function par_showlogs(run_while)
% Show the logfiles generated by the currently connected workers.
% par_showlogs(RunWhile)
%
% This function can scan multiple logfiles simultaneously, and print out any new contents in the
% console.
%
% In:
%   RunWhile : a callback function: new logs are being emitted while this function returns true
%
%                                Christian Kothe, Syntrogi
%                                2015-04-16

% Copyright (C) Christian Kothe, Syntrogi, 2015, christian.kothe@syntrogi.com
%
% This program is free software; you can redistribute it and/or modify it under the terms of the GNU
% General Public License as published by the Free Software Foundation; either version 2 of the
% License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
% even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
% General Public License for more details.
%
% You should have received a copy of the GNU General Public License along with this program; if not,
% write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
% USA

if nargin < 1
    run_while = @()true; end

logpaths = par_globalsetting('logfiles');
workers = par_globalsetting('pool');

% open files...
handles = repmat({NaN},1,length(logpaths));
for k=1:length(logpaths)
    fn = logpaths{k};
    if exist(fn,'file')
        fid = fopen(fn,'r');
        if fid ~= -1
            handles{k} = fid; end
    end
end

cleaner = onCleanup(@()close_handles(handles));

% main loop
while run_while()
    % for each active logfile...
    for k=find(~isnan([handles{:}]))
        % print all new lines
        while true
            line = fgets(handles{k});
            if ~ischar(line) 
                break; end
            fprintf('%s: %s',workers{k},line);
        end
    end
    % wait a bit
    pause(0.25);
end 


function close_handles(handles)
for k=1:length(handles)
    if ~isnan(handles{k})
        fclose(handles{k}); end
end
